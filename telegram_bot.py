from aiogram import Bot, Dispatcher
from aiogram.types import InputMediaPhoto, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.exceptions import TelegramBadRequest, TelegramNetworkError
import aiohttp
import asyncio
import os
import logging
import traceback
from bs4 import BeautifulSoup
import re
from dotenv import load_dotenv
from database import save_message_data, get_message_data, select_for_db
import vk_api
from vk_api.exceptions import ApiError
import requests
from aiohttp import ClientConnectionError, ClientOSError
from tenacity import retry, stop_after_attempt, wait_fixed, retry_if_exception_type
import time
from video_generator import generate_shorts

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG, force=True)
logger = logging.getLogger(__name__)
os.makedirs('logs', exist_ok=True)
file_handler = logging.FileHandler('logs/debug_callback.log')
file_handler.setLevel(logging.DEBUG)
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
logger.addHandler(file_handler)
file_handler.flush = lambda: file_handler.stream.flush()

# –ú–∞—Ä–∫–µ—Ä –≤–µ—Ä—Å–∏–∏ —Ñ–∞–π–ª–∞
logger.info("[TRACE] –ó–∞–≥—Ä—É–∑–∫–∞ telegram_bot.py, –≤–µ—Ä—Å–∏—è —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–∑ caption v9 –æ—Ç 2025-05-18")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
load_dotenv('keys.env')
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
FORWARD_CHANNEL_ID = os.getenv("FORWARD_CHANNEL_ID")
FASHION_CHANNEL_ID = os.getenv("FASHION_CHANNEL_ID")
FINANCE_CHANNEL_ID = os.getenv("FINANCE_CHANNEL_ID")
VK_DEFAULT_TOKEN = os.getenv("VK_DEFAULT_TOKEN")
VK_FASHION_TOKEN = os.getenv("VK_FASHION_TOKEN")
VK_DEFAULT_GROUP_ID = os.getenv("VK_DEFAULT_GROUP_ID")
VK_FASHION_GROUP_ID = os.getenv("VK_FASHION_GROUP_ID")
CHANNEL_ID1 = os.getenv("CHANNEL_ID")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
logger.debug(f"[TRACE] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: TELEGRAM_TOKEN={bool(TELEGRAM_TOKEN)}, CHANNEL_ID1={CHANNEL_ID1}, "
             f"FORWARD_CHANNEL_ID={FORWARD_CHANNEL_ID}, FASHION_CHANNEL_ID={FASHION_CHANNEL_ID}, "
             f"VK_DEFAULT_GROUP_ID={VK_DEFAULT_GROUP_ID}, VK_FASHION_GROUP_ID={VK_FASHION_GROUP_ID}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ VK API
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
try:
    vk_default_session = vk_api.VkApi(token=VK_DEFAULT_TOKEN)
    vk_fashion_session = vk_api.VkApi(token=VK_FASHION_TOKEN)
    vk_default = vk_default_session.get_api()
    vk_fashion = vk_fashion_session.get_api()
    logger.debug("[TRACE] VK API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    logger.error(f"[TRACE] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VK API: {str(e)}")
    vk_default = None
    vk_fashion = None

def clean_caption(caption):
    """–û—á–∏—Å—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –æ—Ç HTML-—Ç–µ–≥–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫."""
    logger.debug(f"[TRACE] –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∏, –¥–ª–∏–Ω–∞: {len(caption)}")
    caption = re.sub(r'<[^>]+>', '', caption)
    caption = re.sub(r'[ \t]+', ' ', caption).strip()
    return caption

def format_vk_caption(caption):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è VK: –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã."""
    logger.debug(f"[TRACE] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è VK, –¥–ª–∏–Ω–∞: {len(caption)}")
    cleaned = re.sub(r'<[^>]+>', '', caption)
    lines = cleaned.split('\n')
    formatted_lines = []
    for i, line in enumerate(lines):
        line = line.strip()
        if not line:
            continue
        if i == 0:
            formatted_lines.append(f"üìä {line}")
        else:
            formatted_lines.append(line)
    result = '\n\n'.join(formatted_lines)
    logger.debug(f"[TRACE] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å VK, –¥–ª–∏–Ω–∞: {len(result)}")
    return result

@retry(stop=stop_after_attempt(3), wait=wait_fixed(2), retry=retry_if_exception_type((requests.RequestException, ClientOSError)))
async def upload_photo_to_vk(photo_url, group_id, category):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ VK."""
    vk = vk_fashion if category == "fashion" else vk_default
    logger.debug(f"[TRACE] upload_photo_to_vk: group_id={group_id}, category={category}, photo_url={photo_url}")
    if not vk:
        logger.error("[TRACE] VK API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        raise ValueError("VK API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    try:
        upload_server = vk.photos.getMessagesUploadServer(group_id=abs(group_id))
        upload_url = upload_server['upload_url']
        logger.debug(f"[TRACE] –ü–æ–ª—É—á–µ–Ω upload_url: {upload_url}")
        photo_response = requests.get(photo_url, timeout=10)
        photo_response.raise_for_status()
        photo_file = photo_response.content
        upload_response = requests.post(upload_url, files={'photo': ('photo.jpg', photo_file)}, timeout=10)
        upload_response.raise_for_status()
        upload_data = upload_response.json()
        logger.debug(f"[TRACE] –û—Ç–≤–µ—Ç upload: {upload_data}")
        saved_photo = vk.photos.saveMessagesPhoto(
            photo=upload_data['photo'],
            server=upload_data['server'],
            hash=upload_data['hash']
        )
        photo_id = f"photo{saved_photo[0]['owner_id']}_{saved_photo[0]['id']}"
        logger.info(f"[TRACE] –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ VK: {photo_id}")
        return photo_id
    except (ApiError, requests.RequestException, ClientOSError) as e:
        logger.error(f"[TRACE] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –≤ VK: {str(e)}")
        raise

@retry(stop=stop_after_attempt(3), wait=wait_fixed(2), retry=retry_if_exception_type((ApiError, requests.RequestException)))
async def post_to_vk(message_text, attachments, group_id, category):
    """–ü—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç –≤ VK."""
    vk = vk_fashion if category == "fashion" else vk_default
    logger.debug(f"[TRACE] post_to_vk: group_id={group_id}, category={category}, attachments={attachments}, text_len={len(message_text)}")
    if not vk:
        logger.error("[TRACE] VK API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        raise ValueError("VK API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    try:
        publish_time1 = int(time.time()) + 600
        response = vk.wall.post(
            owner_id=group_id,
            message=message_text,
            attachments=','.join(attachments) if attachments else None,
            from_group=1,
            close_comments=1,
            publish_date=publish_time1
        )
        logger.info(f"[TRACE] –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω –≤ VK: post_id={response['post_id']}")
        return True, response['post_id']
    except ApiError as e:
        logger.error(f"[TRACE] –û—à–∏–±–∫–∞ VK API: {str(e)}")
        return False, str(e)
    except Exception as e:
        logger.error(f"[TRACE] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ VK: {str(e)}")
        return False, str(e)

async def translate_with_deepseek(text, api_key, max_length=980):
    logger.debug(f"[TRACE] translate_with_deepseek: –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞={len(text)}")
    async with aiohttp.ClientSession() as session:
        payload = {
            "model": "deepseek-chat",
            "messages": [
                {
                    "role": "user",
                    "content": (
                        f"–ü–µ—Ä–µ–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –≤ –∫—Ä–∞—Ç–∫–æ–º —Å—Ç–∏–ª–µ –¥–ª—è Telegram. –û–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±–µ–∑ Markdown, HTML, —ç–º–æ–¥–∑–∏, —Ä–µ–∫–ª–∞–º—ã, —Å—Å—ã–ª–æ–∫. "
                        f"–§–æ—Ä–º–∞—Ç: –∑–∞–≥–æ–ª–æ–≤–æ–∫, –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, —Ç–µ–∫—Å—Ç —Å –∞–±–∑–∞—Ü–∞–º–∏. –ú–∞–∫—Å. –¥–ª–∏–Ω–∞: {max_length} —Å–∏–º–≤–æ–ª–æ–≤: {text}"
                    )
                }
            ],
            "max_tokens": 750
        }
        headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"}
        async with session.post("https://api.deepseek.com/v1/chat/completions", json=payload, headers=headers) as resp:
            if resp.status == 200:
                data = await resp.json()
                translated_text = data["choices"][0]["message"]["content"]
                if len(translated_text) > max_length:
                    logger.info(f"[TRACE] –¢–µ–∫—Å—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç ({len(translated_text)} > {max_length}), –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
                    payload["messages"][0]["content"] = (
                        f"–°–æ–∫—Ä–∞—Ç–∏ —Ç–µ–∫—Å—Ç –¥–æ {max_length-100} —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–µ —É–∫–∞–∑—ã–≤–∞–π –∏—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –ª–∏–±–æ –∏–Ω—É—é –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω—é—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –§–æ—Ä–º–∞—Ç: –∑–∞–≥–æ–ª–æ–≤–æ–∫, –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, —Ç–µ–∫—Å—Ç: {translated_text}"
                    )
                    async with session.post("https://api.deepseek.com/v1/chat/completions", json=payload, headers=headers) as resp:
                        if resp.status == 200:
                            data = await resp.json()
                            translated_text = data["choices"][0]["message"]["content"]
                logger.debug(f"[TRACE] –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–µ–Ω, –¥–ª–∏–Ω–∞: {len(translated_text)}")
                return translated_text
            logger.warning(f"[TRACE] –û—à–∏–±–∫–∞ DeepSeek: {resp.status}")
            return text

@retry(stop=stop_after_attempt(3), wait=wait_fixed(2), retry=retry_if_exception_type((TelegramNetworkError, ClientConnectionError, ClientOSError)))
async def send_to_telegram(channel_id, link, header, text, api_key, db_path, category):
    logger.debug(f"[TRACE] send_to_telegram: channel_id={channel_id}, category={category}")
    if not link:
        logger.error(f"[TRACE] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞: {link}")
        return None, None
    
    news_id = link[43:58]
    logger.debug(f"[TRACE] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω news_id={news_id} –¥–ª—è —Å—Å—ã–ª–∫–∏: {link}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ img/msn
    try:
        img_files = os.listdir('img/msn')
        logger.debug(f"[TRACE] –§–∞–π–ª—ã –≤ img/msn: {img_files}")
    except Exception as e:
        logger.error(f"[TRACE] –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ img/msn: {str(e)}")
    
    translated_text = await translate_with_deepseek(f"{header}\n\n{text}", api_key)
    logger.debug(f"[TRACE] –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞, –¥–ª–∏–Ω–∞: {len(translated_text)}")
    translated_text = re.sub(r'[\*_\[\]]', '', translated_text)
    soup = BeautifulSoup(translated_text, 'html.parser')
    clean_text = soup.get_text()
    
    lines = clean_text.split('\n')
    if lines:
        caption = f"<b>{lines[0].strip()}</b>\n\n"
        caption += '\n\n'.join(line.strip() for line in lines[1:] if line.strip())
    else:
        caption = clean_text
    
    if len(caption) > 1021:
        logger.debug(f"[TRACE] –û–±—Ä–µ–∑–∫–∞ –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤, –¥–ª–∏–Ω–∞: {len(caption)}")
        caption = caption[:1018]
        last_tag = caption.rfind('>')
        if last_tag != -1 and caption.count('<') > caption.count('>'):
            caption = caption[:last_tag + 1]
        caption += "..."
    elif len(caption) > 4096:
        logger.debug(f"[TRACE] –û–±—Ä–µ–∑–∫–∞ –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤, –¥–ª–∏–Ω–∞: {len(caption)}")
        caption = caption[:4093]
        last_tag = caption.rfind('>')
        if last_tag != -1 and caption.count('<') > caption.count('>'):
            caption = caption[:last_tag + 1]
        caption += "..."
    
    logger.info(f"[TRACE] –î–ª–∏–Ω–∞ –ø–æ–¥–ø–∏—Å–∏: {len(caption)} —Å–∏–º–≤–æ–ª–æ–≤")
    logger.debug(f"[TRACE] –ü–æ–¥–ø–∏—Å—å (–ø–µ—Ä–≤—ã–µ 700): {caption[:700]}...")
    
    button_text = "–ü–µ—Ä–µ—Å–ª–∞—Ç—å –≤ Fashion" if category == "fashion" else "–ü–µ—Ä–µ—Å–ª–∞—Ç—å"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=button_text, callback_data=f"forward_{news_id}"),
            InlineKeyboardButton(text="–ü–µ—Ä–µ—Å–ª–∞—Ç—å –∏ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ VK", callback_data=f"forward_vk_{news_id}"),
            InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å Shorts", callback_data=f"create_shorts_{news_id}")
        ]
    ])
    logger.debug(f"[TRACE] –°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: forward_{news_id}, forward_vk_{news_id}, create_shorts_{news_id}")
    
    media = []
    j = 0
    while os.path.isfile(f'img/msn/{news_id}_{j}.png') and j < 10:
        file_path = f'img/msn/{news_id}_{j}.png'
        logger.debug(f"[TRACE] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞: {file_path}, exists={os.path.exists(file_path)}, readable={os.access(file_path, os.R_OK)}")
        if os.access(file_path, os.R_OK):
            logger.debug(f"[TRACE] –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {file_path}")
            media.append(InputMediaPhoto(media=FSInputFile(file_path)))
        else:
            logger.warning(f"[TRACE] –§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {file_path}")
        j += 1
    
    message_ids = []
    file_ids = []
    try:
        if len(media) == 1:
            logger.debug(f"[TRACE] –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: news_id={news_id}")
            try:
                message = await bot.send_photo(
                    chat_id=channel_id,
                    photo=media[0].media,
                    caption=caption,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            except TelegramBadRequest as e:
                logger.warning(f"[TRACE] –û—à–∏–±–∫–∞ HTML: {str(e)}. –û—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ HTML")
                message = await bot.send_photo(
                    chat_id=channel_id,
                    photo=media[0].media,
                    caption=clean_caption(caption),
                    parse_mode=None,
                    reply_markup=keyboard
                )
            message_ids.append(message.message_id)
            file_ids.append(message.photo[-1].file_id)
            logger.info(f"[TRACE] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: news_id={news_id}, message_id={message.message_id}")
        elif len(media) > 1:
            logger.debug(f"[TRACE] –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: news_id={news_id}")
            for i, m in enumerate(media):
                try:
                    message = await bot.send_photo(
                        chat_id=channel_id,
                        photo=m.media,
                        caption=caption if i == 0 else None,
                        parse_mode="HTML" if i == 0 else None,
                        reply_markup=keyboard if i == 0 else None
                    )
                except TelegramBadRequest as e:
                    logger.warning(f"[TRACE] –û—à–∏–±–∫–∞ HTML: {str(e)}. –û—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ HTML")
                    message = await bot.send_photo(
                        chat_id=channel_id,
                        photo=m.media,
                        caption=clean_caption(caption) if i == 0 else None,
                        parse_mode=None if i == 0 else None,
                        reply_markup=keyboard if i == 0 else None
                    )
                message_ids.append(message.message_id)
                file_ids.append(message.photo[-1].file_id)
            logger.info(f"[TRACE] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞: news_id={news_id}, message_ids={message_ids}")
        else:
            logger.debug(f"[TRACE] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞: news_id={news_id}")
            try:
                message = await bot.send_message(
                    chat_id=channel_id,
                    text=caption,
                    parse_mode="HTML",
                    disable_web_page_preview=True,
                    reply_markup=keyboard
                )
            except TelegramBadRequest as e:
                logger.warning(f"[TRACE] –û—à–∏–±–∫–∞ HTML: {str(e)}. –û—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ HTML")
                message = await bot.send_message(
                    chat_id=channel_id,
                    text=clean_caption(caption),
                    parse_mode=None,
                    disable_web_page_preview=True,
                    reply_markup=keyboard
                )
            message_ids.append(message.message_id)
            logger.info(f"[TRACE] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: news_id={news_id}, message_id={message.message_id}")
        
        logger.debug(f"[TRACE] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: news_id={news_id}")
        try:
            await save_message_data(db_path, news_id, caption, message_ids, file_ids, category)
            logger.info(f"[TRACE] –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: news_id={news_id}")
        except Exception as e:
            logger.error(f"[TRACE] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
            raise
        
    except (TelegramNetworkError, ClientConnectionError, ClientOSError) as e:
        logger.error(f"[TRACE] –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: news_id={news_id}, –æ—à–∏–±–∫–∞: {str(e)}")
        raise
    except Exception as e:
        logger.error(f"[TRACE] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: news_id={news_id}, –æ—à–∏–±–∫–∞: {str(e)}")
        return None, None
    
    for j in range(10):
        path = f'img/msn/{news_id}_{j}.png'
        if os.path.isfile(path):
            try:
                os.remove(path)
                logger.debug(f"[TRACE] –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: {path}")
            except Exception as e:
                logger.warning(f"[TRACE] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {path}, –æ—à–∏–±–∫–∞: {str(e)}")
    
    logger.debug(f"[TRACE] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ send_to_telegram: news_id={news_id}")
    return message_ids[0], news_id

@dp.callback_query(lambda c: c.data.startswith('forward_') and not c.data.startswith('forward_vk_'))
async def process_forward_callback(callback_query: CallbackQuery):
    logger.debug(f"[TRACE] –ù–∞—á–∞–ª–æ process_forward_callback")
    callback_data = callback_query.data
    logger.debug(f"[TRACE] –ü–æ–ª—É—á–µ–Ω callback_data: {callback_data}")
    
    try:
        logger.debug(f"[TRACE] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: {callback_data}")
        news_id = callback_data.replace('forward_', '')
        logger.debug(f"[TRACE] –ò–∑–≤–ª–µ—á—ë–Ω news_id: {news_id}")
        if len(news_id) < 5:
            logger.error(f"[TRACE] –ö–æ—Ä–æ—Ç–∫–∏–π news_id: {news_id}")
            await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID", show_alert=True)
            return
    except Exception as e:
        logger.error(f"[TRACE] –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞: {callback_data}, –æ—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"[TRACE] –°—Ç–µ–∫: {traceback.format_exc()}")
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", show_alert=True)
        return
    
    logger.debug(f"[TRACE] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
    if not FORWARD_CHANNEL_ID or not FASHION_CHANNEL_ID or not FINANCE_CHANNEL_ID:
        logger.error(f"[TRACE] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç FORWARD_CHANNEL_ID –∏–ª–∏ FASHION_CHANNEL_ID")
        await callback_query.answer("–û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", show_alert=True)
        return
    
    try:
        logger.debug(f"[TRACE] –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö: news_id={news_id}")
        data = await get_message_data("msn_news.db", news_id)
        if not data:
            logger.error(f"[TRACE] –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: news_id={news_id}")
            await callback_query.answer(f"–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", show_alert=True)
            return
        
        logger.debug(f"[TRACE] –î–∞–Ω–Ω—ã–µ: caption_len={len(data[0])}, message_ids={data[1]}, file_ids={data[2]}, category={data[3]}")
        caption, message_ids, file_ids, category = data
        target_channel = FASHION_CHANNEL_ID if category == "fashion" else FORWARD_CHANNEL_ID
        
        logger.debug(f"[TRACE] –ü–µ—Ä–µ—Å—ã–ª–∫–∞: target_channel={target_channel}")
        if file_ids:
            media = [InputMediaPhoto(media=file_id) for file_id in file_ids]
            media[0].caption = caption
            media[0].parse_mode = "HTML"
            try:
                await bot.send_media_group(chat_id=target_channel, media=media, disable_notification=True)
            except TelegramBadRequest as e:
                logger.warning(f"[TRACE] –û—à–∏–±–∫–∞ HTML: {str(e)}. –û—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ HTML")
                media[0].caption = clean_caption(caption)
                media[0].parse_mode = None
                await bot.send_media_group(chat_id=target_channel, media=media, disable_notification=True)
            logger.info(f"[TRACE] –ü–µ—Ä–µ—Å–ª–∞–Ω–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞: news_id={news_id}, file_ids={file_ids}")
        else:
            try:
                await bot.copy_message(
                    chat_id=target_channel,
                    from_chat_id=callback_query.message.chat.id,
                    message_id=message_ids[0],
                    disable_notification=True
                )
            except TelegramBadRequest as e:
                logger.warning(f"[TRACE] –û—à–∏–±–∫–∞ HTML: {str(e)}. –û—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ HTML")
                await bot.copy_message(
                    chat_id=target_channel,
                    from_chat_id=callback_query.message.chat.id,
                    message_id=message_ids[0],
                    disable_notification=True,
                    parse_mode=None
                )
            logger.info(f"[TRACE] –ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: news_id={news_id}, message_id={message_ids[0]}")
        await callback_query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ!")
    except Exception as e:
        logger.error(f"[TRACE] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: news_id={news_id}, –æ—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"[TRACE] –°—Ç–µ–∫: {traceback.format_exc()}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ", show_alert=True)

@dp.callback_query(lambda c: c.data.startswith('forward_vk_'))
async def process_forward_vk_callback(callback_query: CallbackQuery):
    logger.debug(f"[TRACE] –ù–∞—á–∞–ª–æ process_forward_vk_callback")
    callback_data = callback_query.data
    logger.debug(f"[TRACE] –ü–æ–ª—É—á–µ–Ω callback_data: {callback_data}")
    logger.info(f"[TRACE] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_data: {callback_data}")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ callback_data –≤ CHANNEL_ID1
    logger.debug(f"[TRACE] –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ CHANNEL_ID1={CHANNEL_ID1}")
    try:
        await bot.send_message(
            chat_id=CHANNEL_ID1,
            text=f"[TRACE] –ü–æ–ª—É—á–µ–Ω callback_data: {callback_data}",
            parse_mode=None
        )
        logger.debug(f"[TRACE] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ CHANNEL_ID1: {callback_data}")
    except Exception as e:
        logger.error(f"[TRACE] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ CHANNEL_ID1: {str(e)}")
        logger.error(f"[TRACE] –°—Ç–µ–∫: {traceback.format_exc()}")
    
    try:
        logger.debug(f"[TRACE] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: {callback_data}")
        news_id = callback_data.replace('forward_vk_', '')
        logger.debug(f"[TRACE] –ò–∑–≤–ª–µ—á—ë–Ω news_id: {news_id}")
        if len(news_id) < 5:
            logger.error(f"[TRACE] –ö–æ—Ä–æ—Ç–∫–∏–π news_id: {news_id}")
            await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID", show_alert=True)
            return
    except Exception as e:
        logger.error(f"[TRACE] –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞: {callback_data}, –æ—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"[TRACE] –°—Ç–µ–∫: {traceback.format_exc()}")
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", show_alert=True)
        return
    
    logger.debug(f"[TRACE] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
    if not (FORWARD_CHANNEL_ID and FINANCE_CHANNEL_ID and FASHION_CHANNEL_ID and VK_DEFAULT_TOKEN and VK_FASHION_TOKEN and VK_DEFAULT_GROUP_ID and VK_FASHION_GROUP_ID):
        logger.error(f"[TRACE] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ keys.env")
        await callback_query.answer("–û—à–∏–±–∫–∞: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞", show_alert=True)
        return
    
    try:
        logger.debug(f"[TRACE] –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö: news_id={news_id}")
        data = await get_message_data("msn_news.db", news_id)
        if not data:
            logger.error(f"[TRACE] –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: news_id={news_id}")
            await callback_query.answer(f"–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", show_alert=True)
            return
        
        logger.debug(f"[TRACE] –î–∞–Ω–Ω—ã–µ: caption_len={len(data[0])}, message_ids={data[1]}, file_ids={data[2]}, category={data[3]}")
        caption, message_ids, file_ids, category = data
        target_channel = FASHION_CHANNEL_ID if category == "fashion" else FINANCE_CHANNEL_ID
        try:
            target_vk_group = int(VK_FASHION_GROUP_ID) if category == "fashion" else int(VK_DEFAULT_GROUP_ID)
        except ValueError as e:
            logger.error(f"[TRACE] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç VK_GROUP_ID: {VK_FASHION_GROUP_ID if category == 'fashion' else VK_DEFAULT_GROUP_ID}")
            await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è VK", show_alert=True)
            return
        
        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ Telegram
        logger.debug(f"[TRACE] –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ Telegram: target_channel={target_channel}")
        if file_ids:
            media = [InputMediaPhoto(media=file_id) for file_id in file_ids]
            media[0].caption = caption
            media[0].parse_mode = "HTML"
            try:
                await bot.send_media_group(chat_id=target_channel, media=media, disable_notification=True)
            except TelegramBadRequest as e:
                logger.warning(f"[TRACE] –û—à–∏–±–∫–∞ HTML: {str(e)}. –û—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ HTML")
                media[0].caption = clean_caption(caption)
                media[0].parse_mode = None
                await bot.send_media_group(chat_id=target_channel, media=media, disable_notification=True)
            logger.info(f"[TRACE] –ü–µ—Ä–µ—Å–ª–∞–Ω–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞: news_id={news_id}, file_ids={file_ids}")
        else:
            try:
                await bot.copy_message(
                    chat_id=target_channel,
                    from_chat_id=callback_query.message.chat.id,
                    message_id=message_ids[0],
                    disable_notification=True
                )
            except TelegramBadRequest as e:
                logger.warning(f"[TRACE] –û—à–∏–±–∫–∞ HTML: {str(e)}. –û—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ HTML")
                await bot.copy_message(
                    chat_id=target_channel,
                    from_chat_id=callback_query.message.chat.id,
                    message_id=message_ids[0],
                    disable_notification=True,
                    parse_mode=None
                )
            logger.info(f"[TRACE] –ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: news_id={news_id}, message_id={message_ids[0]}")
        
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ VK
        logger.debug(f"[TRACE] –ù–∞—á–∞–ª–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ VK: target_vk_group={target_vk_group}")
        attachments = []
        if target_vk_group == int(VK_FASHION_GROUP_ID):
            caption = f'{caption}\n\nhttps://t.me/women_fashionstyle'
        elif target_vk_group == int(VK_DEFAULT_GROUP_ID):
            caption = f'{caption}\n\nhttps://t.me/financemonitoring'
        else:
            caption = caption
        message_text = format_vk_caption(f'{caption}')
        
        if file_ids:
            logger.debug(f"[TRACE] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: file_ids={file_ids}")
            for file_id in file_ids:
                try:
                    logger.debug(f"[TRACE] –ü–æ–ª—É—á–µ–Ω–∏–µ file_info: file_id={file_id}")
                    file_info = await bot.get_file(file_id)
                    photo_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_info.file_path}"
                    photo_id = await upload_photo_to_vk(photo_url, target_vk_group, category)
                    if photo_id:
                        attachments.append(photo_id)
                except Exception as e:
                    logger.error(f"[TRACE] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ file_id={file_id}: {str(e)}")
                    continue
        
        logger.debug(f"[TRACE] –í—ã–∑–æ–≤ post_to_vk: attachments={attachments}")
        success, result = await post_to_vk(message_text, attachments, target_vk_group, category)
        if success:
            logger.info(f"[TRACE] –£—Å–ø–µ—à–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ VK: news_id={news_id}, post_id={result}")
            await callback_query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ VK!")
        else:
            logger.error(f"[TRACE] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ VK: news_id={news_id}, –ø—Ä–∏—á–∏–Ω–∞: {result}")
            await callback_query.answer("–ü–µ—Ä–µ—Å–ª–∞–Ω–æ, –Ω–æ –æ—à–∏–±–∫–∞ –≤ VK!", show_alert=True)
            
    except Exception as e:
        logger.error(f"[TRACE] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: news_id={news_id}, –æ—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"[TRACE] –°—Ç–µ–∫: {traceback.format_exc()}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
    finally:
        logger.debug(f"[TRACE] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ process_forward_vk_callback")

@dp.callback_query(lambda c: c.data.startswith('create_shorts_'))
async def process_create_shorts_callback(callback_query: CallbackQuery):
    logger.debug(f"[TRACE] –ù–∞—á–∞–ª–æ process_create_shorts_callback")
    callback_data = callback_query.data
    logger.debug(f"[TRACE] –ü–æ–ª—É—á–µ–Ω callback_data: {callback_data}")
    
    try:
        original_news_id = callback_data.replace('create_shorts_', '')
        news_id = original_news_id
        while news_id.startswith('vk_'):
            news_id = news_id[3:]
            logger.warning(f"[TRACE] –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å vk_ –≤ create_shorts: {original_news_id} -> {news_id}")
        logger.debug(f"[TRACE] –ò–∑–≤–ª–µ—á—ë–Ω news_id: {news_id}")
        if len(news_id) < 5:
            logger.error(f"[TRACE] –ö–æ—Ä–æ—Ç–∫–∏–π news_id: {news_id}")
            await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID", show_alert=True)
            return
    except Exception as e:
        logger.error(f"[TRACE] –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞: {callback_data}, –æ—à–∏–±–∫–∞: {str(e)}")
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", show_alert=True)
        return
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
        message_data = await get_message_data("msn_news.db", news_id)
        if not message_data:
            logger.error(f"[TRACE] –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: news_id={news_id}")
            await callback_query.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", show_alert=True)
            return
        
        caption, message_ids, file_ids, category = message_data
        logger.debug(f"[TRACE] –î–∞–Ω–Ω—ã–µ: caption_len={len(caption)}, message_ids={message_ids}, file_ids={file_ids}, category={category}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–∑ –±–∞–∑—ã
        header_data = await select_for_db("msn_news.db", news_id, "header")
        if header_data:
            header = header_data[0]
            logger.debug(f"[TRACE] –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –±–∞–∑—ã: {header}")
        else:
            logger.warning(f"[TRACE] –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ caption: news_id={news_id}")
            soup = BeautifulSoup(caption, 'html.parser')
            bold_tags = soup.find_all('b')
            header = bold_tags[0].get_text().strip() if bold_tags else caption.split('\n')[0].strip()
            logger.debug(f"[TRACE] –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {header}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ caption
        soup = BeautifulSoup(caption, 'html.parser')
        text = soup.get_text()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ file_ids
        image_paths = []
        if file_ids:
            for idx, file_id in enumerate(file_ids):
                try:
                    file = await bot.get_file(file_id)
                    file_path = file.file_path
                    local_path = f"tmp/{news_id}_{idx}.png"
                    os.makedirs("tmp", exist_ok=True)
                    await bot.download_file(file_path, local_path)
                    image_paths.append(local_path)
                    logger.debug(f"[TRACE] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {local_path}")
                except Exception as e:
                    logger.warning(f"[TRACE] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {file_id}: {str(e)}")
        if len(text) > 600:
            text = await translate_with_deepseek(text, DEEPSEEK_API_KEY, max_length=450)
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ
        logger.debug(f"[TRACE] –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Shorts: news_id={news_id}")
        video_path = await generate_shorts(news_id, header, text, image_paths, category)
        if not video_path:
            logger.error(f"[TRACE] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ: news_id={news_id}")
            await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ", show_alert=True)
            return
        
        logger.info(f"[TRACE] –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: {video_path}")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –≤ —Ç–æ—Ç –∂–µ –∫–∞–Ω–∞–ª
        logger.debug(f"[TRACE] –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –≤ –∫–∞–Ω–∞–ª: chat_id={callback_query.message.chat.id}, video_path={video_path}")
        try:
            await bot.send_video(
                chat_id=callback_query.message.chat.id,
                video=FSInputFile(video_path),
                caption=f"Shorts: {header}",
                parse_mode="HTML",
                disable_notification=True
            )
            logger.info(f"[TRACE] –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: news_id={news_id}, video_path={video_path}")
        except TelegramBadRequest as e:
            logger.warning(f"[TRACE] –û—à–∏–±–∫–∞ HTML –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {str(e)}. –û—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ HTML")
            await bot.send_video(
                chat_id=callback_query.message.chat.id,
                video=FSInputFile(video_path),
                caption=f"Shorts: {header}",
                parse_mode=None,
                disable_notification=True
            )
            logger.info(f"[TRACE] –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ HTML: news_id={news_id}, video_path={video_path}")
        except Exception as e:
            logger.error(f"[TRACE] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: news_id={news_id}, –æ—à–∏–±–∫–∞: {str(e)}")
            await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ", show_alert=True)
            return
        
        await callback_query.answer(f"–í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {video_path}")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞
        try:
            os.remove(video_path)
            logger.debug(f"[TRACE] –£–¥–∞–ª—ë–Ω –≤–∏–¥–µ–æ—Ñ–∞–π–ª: {video_path}")
        except Exception as e:
            logger.warning(f"[TRACE] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞: {video_path}, –æ—à–∏–±–∫–∞: {str(e)}")
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for path in image_paths:
            try:
                os.remove(path)
                logger.debug(f"[TRACE] –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: {path}")
            except Exception as e:
                logger.warning(f"[TRACE] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {path}, –æ—à–∏–±–∫–∞: {str(e)}")
        
    except Exception as e:
        logger.error(f"[TRACE] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Shorts: news_id={news_id}, –æ—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"[TRACE] –°—Ç–µ–∫: {traceback.format_exc()}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ", show_alert=True)

@dp.callback_query()
async def debug_callback(callback_query: CallbackQuery):
    logger.debug(f"[TRACE] debug_callback –≤—ã–∑–≤–∞–Ω: callback_data={callback_query.data}")

async def start_dispatcher():
    logger.info(f"[TRACE] –î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot, polling_timeout=15)